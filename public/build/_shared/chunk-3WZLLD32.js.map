{
  "version": 3,
  "sources": ["empty-module:@remix-run/node", "../../../app/services/Auth0Service.ts"],
  "sourcesContent": ["module.exports = {};", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/services/Auth0Service.ts\"\n);\nimport.meta.hot.lastModified = \"1723509163655.4893\";\n}\n// REMIX HMR END\n\nimport { createCookieSessionStorage, redirect, json } from '@remix-run/node';\nimport type { SessionStorage } from '@remix-run/node';\n\nexport interface Auth0User {\n  sub: string;\n  name?: string;\n  email?: string;\n  picture?: string;\n  [key: string]: unknown;\n}\n\nexport interface Auth0TokenResponse {\n  access_token: string;\n  id_token?: string;\n  expires_in: number;\n  token_type: string;\n  refresh_token?: string;\n}\n\nexport interface Auth0Session {\n  accessToken: string;\n  idToken?: string;\n  refreshToken?: string;\n  expiresIn: number;\n  tokenType: string;\n  user: Auth0User;\n}\n\ntype SessionData = {\n  accessToken?: string;\n  refreshToken?: string;\n  idToken?: string;\n  expiresAt?: number;\n  userId?: string;\n  isAdmin?: boolean;\n  auth_state?: string;\n};\n\ntype SessionFlashData = {\n  error: string;\n};\n\nexport class Auth0Service {\n  private readonly domain: string;\n  private readonly clientId: string;\n  private readonly clientSecret: string;\n  private readonly audience: string;\n  private readonly callbackUrl: string;\n  private readonly logoutReturnTo: string;\n  private readonly sessionStorage: SessionStorage<SessionData, SessionFlashData>;\n\n  constructor(\n    domain: string,\n    clientId: string,\n    clientSecret: string,\n    audience: string,\n    callbackUrl: string,\n    logoutReturnTo: string,\n    sessionSecret: string\n  ) {\n    this.domain = domain;\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n    this.audience = audience;\n    this.callbackUrl = callbackUrl;\n    this.logoutReturnTo = logoutReturnTo;\n    this.sessionStorage = createCookieSessionStorage<SessionData, SessionFlashData>({\n      cookie: {\n        name: '_auth',\n        sameSite: 'lax',\n        path: '/',\n        httpOnly: true,\n        secrets: [sessionSecret],\n        secure: process.env.NODE_ENV === 'production',\n        maxAge: 60 * 60 * 24 * 30, // 30 days\n      },\n    });\n  }\n\n  async getUser(request: Request): Promise<Auth0User | null> {\n    const session = await this.getUserSession(request);\n    if (!session.accessToken) return null;\n    try {\n      return await this.verifyToken(session.accessToken);\n    } catch (error) {\n      console.error('Error verifying token:', error);\n      return null;\n    }\n  }\n\n  async getUserAndAdminStatus(request: Request): Promise<{ user: Auth0User; isAdmin: boolean } | null> {\n    const session = await this.getUserSession(request);\n    if (!session.accessToken) return null;\n    try {\n      const user = await this.verifyToken(session.accessToken);\n      if (!user) return null;\n      return { user, isAdmin: session.isAdmin ?? false };\n    } catch (error) {\n      console.error('Error getting user and admin status:', error);\n      return null;\n    }\n  }\n\n  async verifyAdmin(request: Request): Promise<boolean> {\n    const session = await this.getUserSession(request);\n    return session.isAdmin ?? false;\n  }\n\n  getLoginUrl(state?: string): string {\n    const params = new URLSearchParams({\n      response_type: 'code',\n      client_id: this.clientId,\n      redirect_uri: this.callbackUrl,\n      scope: 'openid profile email',\n      audience: this.audience,\n    });\n    if (state) {\n      params.append('state', state);\n    }\n    return `https://${this.domain}/authorize?${params.toString()}`;\n  }\n\n  async handleLogin(request: Request): Promise<Response> {\n    const session = await this.sessionStorage.getSession();\n    const state = crypto.randomUUID();\n    session.set('auth_state', state);\n    return redirect(this.getLoginUrl(state), {\n      headers: {\n        'Set-Cookie': await this.sessionStorage.commitSession(session),\n      },\n    });\n  }\n\n  async handleCallback(request: Request): Promise<Response> {\n    const url = new URL(request.url);\n    const code = url.searchParams.get('code');\n    const state = url.searchParams.get('state');\n\n    if (!code) {\n      throw new Error('No code provided in callback');\n    }\n\n    const session = await this.sessionStorage.getSession(request.headers.get('Cookie'));\n    const savedState = session.get('auth_state');\n\n    if (!state || state !== savedState) {\n      throw new Error('Invalid state parameter');\n    }\n\n    try {\n      const { accessToken, refreshToken, idToken, expiresIn, user } = await this.exchangeCodeForTokens(code);\n      const isAdmin = this.isAdmin(user);\n      return this.createUserSession({\n        accessToken,\n        refreshToken,\n        idToken,\n        expiresIn,\n        userId: user.sub,\n        isAdmin,\n      }, '/dashboard');\n    } catch (error) {\n      console.error('Error handling callback:', error);\n      return redirect('/login?error=AuthCallbackFailed');\n    }\n  }\n\n  async refreshTokens(request: Request): Promise<Response | null> {\n    const session = await this.getUserSession(request);\n    if (!session.refreshToken) return null;\n\n    try {\n      const tokenResponse = await this.refreshToken(session.refreshToken);\n      const user = await this.verifyToken(tokenResponse.access_token);\n      if (!user) throw new Error('Failed to verify user after token refresh');\n\n      const isAdmin = this.isAdmin(user);\n      return this.createUserSession({\n        accessToken: tokenResponse.access_token,\n        refreshToken: tokenResponse.refresh_token,\n        idToken: tokenResponse.id_token,\n        expiresIn: tokenResponse.expires_in,\n        userId: user.sub,\n        isAdmin,\n      }, request.url);\n    } catch (error) {\n      console.error('Error refreshing tokens:', error);\n      return this.logout(request);\n    }\n  }\n\n  async refreshToken(refreshToken: string): Promise<Auth0TokenResponse> {\n    const body = new URLSearchParams({\n      grant_type: 'refresh_token',\n      client_id: this.clientId,\n      client_secret: this.clientSecret,\n      refresh_token: refreshToken,\n    });\n    return this.fetchToken(body);\n  }\n\n  getLogoutUrl(): string {\n    return `https://${this.domain}/v2/logout?client_id=${this.clientId}&returnTo=${encodeURIComponent(this.logoutReturnTo)}`;\n  }\n\n  async logout(request: Request): Promise<Response> {\n    const session = await this.sessionStorage.getSession(request.headers.get('Cookie'));\n    return redirect(this.getLogoutUrl(), {\n      headers: {\n        'Set-Cookie': await this.sessionStorage.destroySession(session),\n      },\n    });\n  }\n\n  async requireUser(request: Request): Promise<Auth0User> {\n    const user = await this.getUser(request);\n    if (!user) {\n      throw redirect('/login');\n    }\n    return user;\n  }\n\n  async requireAdmin(request: Request): Promise<void> {\n    const isAdmin = await this.verifyAdmin(request);\n    if (!isAdmin) {\n      throw redirect('/unauthorized');\n    }\n  }\n\n  adminMiddleware(loader: (args: { request: Request; params: Record<string, string> }) => Promise<Response>) {\n    return async (args: { request: Request; params: Record<string, string> }) => {\n      try {\n        await this.requireAdmin(args.request);\n        return loader(args);\n      } catch (error) {\n        if (error instanceof Response && error.status === 302) {\n          return error;\n        }\n        return json({ error: 'Unauthorized' }, { status: 403 });\n      }\n    };\n  }\n\n  async updateUserProfile(accessToken: string, updates: Partial<Auth0User>): Promise<Auth0User> {\n    const response = await fetch(`https://${this.domain}/api/v2/users/${updates.sub}`, {\n      method: 'PATCH',\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updates),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to update user profile');\n    }\n\n    return response.json();\n  }\n\n  async getUserRoles(accessToken: string, userId: string): Promise<string[]> {\n    const response = await fetch(`https://${this.domain}/api/v2/users/${userId}/roles`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch user roles');\n    }\n\n    const roles = await response.json();\n    return roles.map((role: { name: string }) => role.name);\n  }\n\n  private async getUserSession(request: Request): Promise<SessionData> {\n    const session = await this.sessionStorage.getSession(request.headers.get('Cookie'));\n    return {\n      accessToken: session.get('accessToken'),\n      refreshToken: session.get('refreshToken'),\n      idToken: session.get('idToken'),\n      expiresAt: session.get('expiresAt'),\n      userId: session.get('userId'),\n      isAdmin: session.get('isAdmin'),\n      auth_state: session.get('auth_state'),\n    };\n  }\n\n  private async createUserSession(\n    {\n      accessToken,\n      refreshToken,\n      idToken,\n      expiresIn,\n      userId,\n      isAdmin,\n    }: {\n      accessToken: string;\n      refreshToken?: string;\n      idToken?: string;\n      expiresIn: number;\n      userId: string;\n      isAdmin: boolean;\n    },\n    redirectTo: string\n  ): Promise<Response> {\n    const session = await this.sessionStorage.getSession();\n    session.set('accessToken', accessToken);\n    session.set('refreshToken', refreshToken);\n    session.set('idToken', idToken);\n    session.set('expiresAt', Date.now() + expiresIn * 1000);\n    session.set('userId', userId);\n    session.set('isAdmin', isAdmin);\n    return redirect(redirectTo, {\n      headers: {\n        'Set-Cookie': await this.sessionStorage.commitSession(session),\n      },\n    });\n  }\n\n  private async exchangeCodeForTokens(code: string): Promise<{\n    accessToken: string;\n    refreshToken?: string;\n    idToken?: string;\n    expiresIn: number;\n    user: Auth0User;\n  }> {\n    const body = new URLSearchParams({\n      grant_type: 'authorization_code',\n      client_id: this.clientId,\n      client_secret: this.clientSecret,\n      code,\n      redirect_uri: this.callbackUrl,\n    });\n\n    const tokenResponse = await this.fetchToken(body);\n    const user = await this.verifyToken(tokenResponse.access_token);\n\n    if (!user) {\n      throw new Error('Failed to retrieve user information after login');\n    }\n\n    return {\n      accessToken: tokenResponse.access_token,\n      refreshToken: tokenResponse.refresh_token,\n      idToken: tokenResponse.id_token,\n      expiresIn: tokenResponse.expires_in,\n      user,\n    };\n  }\n\n  private async verifyToken(token: string): Promise<Auth0User | null> {\n    try {\n      const response = await fetch(`https://${this.domain}/userinfo`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to verify token with Auth0');\n      }\n\n      return await response.json() as Auth0User;\n    } catch (error) {\n      console.error('Failed to verify token with Auth0:', error);\n      return null;\n    }\n  }\n\n  private async fetchToken(body: URLSearchParams): Promise<Auth0TokenResponse> {\n    const response = await fetch(`https://${this.domain}/oauth/token`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: body.toString(),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to obtain token from Auth0');\n    }\n\n    return await response.json() as Auth0TokenResponse;\n  }\n\n  private isAdmin(user: Auth0User): boolean {\n    const roles = user[`https://${this.domain}/roles`];\n    return Array.isArray(roles) ? roles.includes('admin') : false;\n  }\n}\n\n// Usage example:\nexport const auth0Service = new Auth0Service(\n  process.env.AUTH0_DOMAIN!,\n  process.env.AUTH0_CLIENT_ID!,\n  process.env.AUTH0_CLIENT_SECRET!,\n  process.env.AUTH0_AUDIENCE!,\n  process.env.AUTH0_CALLBACK_URL!,\n  process.env.AUTH0_LOGOUT_RETURN_TO!,\n  process.env.SESSION_SECRET!\n);"],
  "mappings": "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",
  "names": []
}
